{
  "author": {
    "name": "Arnab Chakraborty",
    "email": "arnabc@webgyani.com",
    "url": "http://arnab.ch"
  },
  "name": "safe-browse",
  "description": "A Node.js module to verify whether a URL is a malware or phishing website, using Google Safe Browsing API",
  "version": "1.0.1",
  "keywords": [
    "safe browse",
    "browse safe",
    "safe",
    "phishing",
    "malware"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/arnabc/node-safe-browse.git"
  },
  "main": "./lib/safe-browse.js",
  "engines": {
    "node": ">=v0.6.0"
  },
  "dependencies": {
    "underscore": "latest",
    "request": ">=2.9.203"
  },
  "devDependencies": {
    "vows": ">=0.6.3"
  },
  "license": "MIT",
  "readme": "Node Safe Browse -- Utility module to check URLs against Google's SafeBrowsing Lookup API\n================\n\nThe SafeBrowsing Lookup API allows applications to check malicious URLs against Google's constantly updated list of malware and phishing websites/pages.\n\n\nInstall\n---------\n\nUsing `npm`\n\n<pre>\n  npm install safe-browse\n</pre>\n\nor from source\n\n<pre>\n  git clone git://github.com/arnabc/node-safe-browse.git\n  cd node-safe-browse\n  npm link\n</pre>\n\nUsage\n----------\n\nIn order to use the module you need to sign up for an `API_KEY` from Google [SafeBrowsing key signup](http://www.google.com/safebrowsing/key_signup.html).\n\n\n```javascript\n// initialize\nSafeBrowse = require('safe-browse');\nvar api = new SafeBrowse.Api( API_KEY, options /* optional */ );\n```\n\nBy default the `lookup()` method returns an `EventEmitter` object which you can use to bind to `success` and `error` events respectively.\n\n```javascript\napi.lookup('http://twitter.com')\n    .on( 'success', function ( data ) {\n\t    // handle success\n    } )\n    .on( 'error', function ( error ) {\n\t    // handle error\n    } );\n```\n\nor you can also use a `callback function` as the second argument like this:\n\n```javascript\napi.lookup(['http://twitter.com', 'http://gumblar.cn'], function ( error, data ) {\n\t// handle data\n} );\n```\n\n#### SafeBrowse Options\n\n* `appver` - Optional, the version number of the application, default is the version number of the `safe-browse` module.\n* `pvar` - Google SafeBrowsing API protocol version, you can change this if Google updates their protocol version number. The current version is `3.0`.\n* `debug` - Debug flag (Boolean), enabling this will output some helppful logging messages in `Console`.\n* `api` - The URL of the Google SafeBrowsing API, in case it changes you can use the new API url to initialize the module without changing anything in the module code.\n\n\nResponse Handling\n-----------------\n\nIn case of `success` the result data contains a map with the specified URL as the _key_ and corresponding result text as the value (as received from the API).\n\n```javascript\napi.lookup('http://google.com')\n\n// will have the output like below:\n{\n\tstatusCode: 204,\n\tdata: {\n\t\t'http://google.com': 'ok' // it could be anything like ok|malware|phishing|phishing,malware\n\t}\n}\n```\n\nFor multiple requests\n\nTo check multiple requests at once, provide an array of _valid_ URLs to the `lookup()` method.\n\n```javascript\napi.lookup(['http://google.com', 'http://gumblar.cn'])\n\n// will have the output like below:\n{\n\tstatusCode: 200,\n\tdata: {\n\t\t'http://google.com': 'ok',\n\t\t'http://gumblar.cn': 'malware'\n\t}\n}\n```\n\nResponse Status Codes\n-----------------\n\nThe following are the HTTP status codes that Google SafeBrowsing Lookup API returns for GET or POST request:\n\n#### GET Requests\n\n* `200` - The queried URL is either phishing, malware or both, see the response body for the specific type.\n* `204` - The requested URL is legitimate, no response body returned.\n* `400` - Bad Request — The HTTP request was not correctly formed.\n* `401` - Not Authorized — The apikey is not authorized.\n* `503` - Service Unavailable — The server cannot handle the request. Besides the normal server failures, it could also indicate that the client has been **throttled** by sending too many requests.\n\nPossible reasons for the Bad Request (HTTP code 400):\n\n* Not all the required CGI parameters are specified\n* Some of the CGI parameters are empty\n* The queried URL is not a valid URL or not properly encoded\n\nBe sure to check against `503`, if you get that back off for sometime (the documentation does not specify whether to exponentially back-off or not) and retry again.\n\n#### POST Requests\n\nIf you provide multiple URLs to check against the SafeBrowsing API, `safe-browse` module automatically uses HTTP POST. The maximum number of URLs that you can check at once is `500`.\n\n* `200` - AT LEAST ONE of the queried URLs are matched in either the phishing or malware lists, the actual results are returned through the response body.\n* `204` - NONE of the queried URLs matched the phishing or malware lists, no response body returned.\n* `400` - Bad Request — The HTTP request was not correctly formed.\n* `401` - Not Authorized — The apikey is not authorized.\n* `503` - Service Unavailable — The server cannot handle the request. Besides the normal server failures, it could also indicate that the client has been **throttled** by sending too many requests.\n\n\nPossible reasons for the Bad Request (HTTP code 400):\n\n* Not all the required CGI parameters are specified.\n* Some of the CGI parameters are empty.\n* Fail to specify the number of URLs in the first line of request body.\n* The number of URLs specified in the first line does not match the actual number of URLs specified in the subsequent lines.\n* At least one of the queried URL is not a valid URL or not properly encoded.\n\n\nError Handling\n---------------\n\nIf the response status of the request is one of `400`, `401` and `503` then the module fires the `error` event and the error object contains the `statusCode` property with the value of the received HTTP status code. Take a look at the following example:\n\n```javascript\napi = new SafeBrowse.API( 'INVALID_API_KEY' );\napi.lookup('htp://www.example.com')\n\t.on( 'error', function ( error ) {\n\t\t// the HTTP status text returned by the API\n\t\tconsole.log( error.message );\n\t\t// the HTTP status code returned by the API\n\t\tconsole.log( error.statusCode ); // 401 - Not authorized\n\t} );\n```\n\nAbout\n-----\nIf you have a question then please file an issue or find me on the Twitter [@arnabc](http://twitter.com/arnabc).\n\nLicense\n--------\n\nMIT License. Copyright 2012 Arnab Chakraborty. http://arnab.ch\n",
  "readmeFilename": "README.md",
  "_id": "safe-browse@1.0.1",
  "dist": {
    "shasum": "8a501aca97a0beb6b33096f064355a06564053ca"
  },
  "_from": "safe-browse@",
  "_resolved": "https://registry.npmjs.org/safe-browse/-/safe-browse-1.0.1.tgz"
}
