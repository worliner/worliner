{
  "name": "node-icu-charset-detector",
  "version": "0.0.6",
  "main": "./node-icu-charset-detector.js",
  "description": "Simple binding for ICU charset detector",
  "keywords": [
    "charset-detection",
    "icu"
  ],
  "repository": {
    "type": "git",
    "path": "git://github.com/mooz/node-icu-charset-detector.git"
  },
  "homepage": "http://github.com/mooz/node-icu-charset-detector",
  "bugs": "http://github.com/mooz/node-icu-charset-detector/issues",
  "author": {
    "name": "Masafumi Oyamada",
    "email": "stillpedant@gmail.com",
    "url": "http://mooz.github.com/"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "# ICU Character Set Detection for Node.js\n\n>Character set detection is the process of determining the character set, or encoding, of character data in an unknown format.\n\nA simple binding of ICU character set detection (http://userguide.icu-project.org/conversion/detection) for Node.js.\n\n## Installation\n\nAt first, install `libicu` into your system. Debian users can install `libicu` by `apt-get` easily.\n\n    sudo apt-get install libicu-dev\n\nAfter that, install `node-icu-charset-detector` from npm.\n\n    npm install node-icu-charset-detector\n\n## Usage\n\n### Simple usage\n\n`node-icu-charset-detector` provides a function `detectCharset(buffer)`, where `buffer` is an instance of `Buffer` whose charset should be detected.\n\n    var charsetDetector = require(\"node-icu-charset-detector\");\n\n    var buffer = fs.readFileSync(\"/path/to/the/file\");\n    var charset = charsetDetector.detectCharset(buffer);\n    \n    console.log(\"charset name: \" + charset.toString());\n    console.log(\"language: \" + charset.language);\n    console.log(\"detection confidence: \" + charset.confidence);\n\n`detectCharset(buffer)` returns the detected charset name for `buffer`, and the returned charset name has two extra properties `language` and `confidence`:\n\n- `charset.language`\n  - language name for the detected character set.\n- `charset.confidence`\n  - confidence of the charset detection for `charset`.\n\n### Leveraging node-iconv\n\nSince ICU itself does not have a feature to convert character sets, you may need to use `node-iconv` (https://github.com/bnoordhuis/node-iconv), which has a powerful character sets converting feature.\n\nHere is a simple example to leverage `node-iconv` to convert character sets not supported by Node itself.\n\n    function bufferToString(buffer) {\n      var charsetDetector = require(\"node-icu-charset-detector\");\n      var charset = charsetDetector.detectCharset(buffer).toString();\n\n      try {\n        return buffer.toString(charset);\n      } catch (x) {\n        var Iconv = require(\"iconv\").Iconv;\n        var charsetConverter = new Iconv(charset, \"utf8\");\n        return charsetConverter.convert(buffer).toString();\n      }\n    }\n\n    var buffer = fs.readFileSync(\"/path/to/the/file\");\n    var bufferString = bufferToString(buffer);\n",
  "readmeFilename": "README.md",
  "_id": "node-icu-charset-detector@0.0.6",
  "_from": "node-icu-charset-detector@"
}
